
from tbot import BotHandler, Message, Callback, InlineButton
import re
import datetime
from database import Database
import bot_token
import json

token = bot_token.BIRTHDAY_BOT_TOKEN
my_bot = BotHandler(token)
db = Database('data.db')


class BirthdayHandler:
    '''
    BirthdayHandler class implement functions to find today's birthdays and celebrate.
    '''

    def __init__(self):
        '''
        BirthdayHandler constructor
        '''
        self._prev_date = None

    def check_birthday(self):
        '''
        Check there are birthdays today.
        '''
        cur_date = datetime.date.today()
        if self._prev_date != cur_date:
            self._prev_date = cur_date
            b_list = db.get_birthdays_by_date(cur_date.strftime('%d.%m.%Y'))
            for i in b_list:
                self.celebrate(name=i['name'],birth_date=i['birth_date'],chat_id=i['chat_id'])
            

    def celebrate(self, name, birth_date, chat_id):
        '''
        Celebrates the birthday.
        '''
        my_bot.send_message(chat_id, f'–° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è {name}! üéÇüòò')


    def check_new_birthday(self, name, birth_date, chat_id):
        '''
        Check if selected birthday is tooday.
        '''
        c_date = datetime.date.today()
        d,m,_ = map(int, birth_date.split('.'))
        if d == c_date.day and m == c_date.month:
            self.celebrate(name, birth_date, chat_id)
        

birthday_handler = BirthdayHandler()



@my_bot.recieve_command_decorator('/help')
def help_command(message : Message):
    '''
    Recieve /help command and send help information to chat.
    '''
    help_str = """ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ—Ö —Å –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è.\
    –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ–Ω –≤–∞—Å –ø–æ–∑–¥—Ä–∞–≤–∏–ª, –µ–º—É –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —É –∫–æ–≥–æ –∫–æ–≥–¥–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è,\
    –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add [–∏–º—è] [–¥–µ–Ω—å].[–º–µ—Å—è—Ü].[–≥–æ–¥] , –Ω–∞–ø—Ä–∏–º–µ—Ä "/add test 1.1.1111"\
    –î–ª—è —É–¥–∞–ª–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–∑–¥—Ä–∞–≤–ª—è—Ç—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /del

    –ö–æ–º–∞–Ω–¥—ã:
    /start
    –ü–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.
    /help
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –±–æ—Ç–∞.
    /add [–∏–º—è] [–¥–µ–Ω—å].[–º–µ—Å—è—Ü].[–≥–æ–¥]
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è –ü—Ä–∏–º–µ—Ä "/add test 1.1.1111"
    /del 
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–∫–æ–π –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.
    /list
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –î–Ω–∏ –†–æ–∂–¥–µ–Ω–∏—è.
    /calc 
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –¥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –î–Ω—è –†–æ–∂–¥–µ–Ω–∏—è.

    –ò—Å—Ö–æ–¥–Ω–∏–∫–∏ üòç –ª–µ–∂–∞—Ç —Ç—É—Ç: https://github.com/yarik2215/birthdaybot/tree/dev_callback
    """
    my_bot.send_message(message.chat_id, help_str)


@my_bot.recieve_command_decorator('/start')
def hello_message(message : Message) -> None:
    '''
    Handle /start and send hello msg to chat.
    '''
    my_bot.send_message(message.chat_id, f'–ü—Ä–∏–≤–µ—Ç {message.sender_first_name}, —è –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –Ω–∞–ø–∏—à–∏ /help üòä')


@my_bot.recieve_command_decorator('/add')
def add_command(message : Message):
    '''
    Recieve /add command and, add new birthday.
    '''
    match = re.search(r'(\/add)\S* (.*) (\d{1,2}\.\d{1,2}\.\d{1,4})',message.text)
    if match:
        _, _name, _date = match.groups()
        try:
            db.add_birthday(_name, _date, message.chat_id)
        except ValueError:
            my_bot.send_message(message.chat_id, '–£–ø—Å, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞.')
            return    
        except KeyError:
            my_bot.send_message(message.chat_id, '–£–ø—Å, —Ç–∞–∫–æ–µ –∏–º—è —É–∂–µ –µ—Å—Ç—å.')    
            return
        my_bot.send_message(message.chat_id, f'–î–æ–±–∞–≤–ª–µ–Ω –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µüòÉ\n{_name} {_date}')
        #check if added birthday is today
        birthday_handler.check_new_birthday(_name, _date, message.chat_id)
    else:
        my_bot.send_message(message.chat_id, 'Wrong /add arguments. Use /add "[name]" [day].[month].[year]')
    # print(match)


@my_bot.recieve_command_decorator('/del')
def del_command(message : Message):
    '''
    Get /del command and delete birthday with specified name
    '''
    names = db.get_chat_birthdays(message.chat_id)
    b_list = [[InlineButton('Cancel','Cancel','cancel')]]
    b_list.extend([[InlineButton(text = i['name'], data = i['name'], handler_name = 'del')] for i in names])
    my_bot.send_inline_keyboard(message.chat_id,'–ö–æ–≥–æ —É–¥–∞–ª–∏—Ç—å?',b_list)

@my_bot.recieve_callback_decorator('del')
def del_callback(callback : Callback):
    '''
    Del command callback. Del selected birthday.
    '''
    text = None
    try:
        name = callback.data
        db.del_birthday(name, callback.chat_id)
        text = f'{name} —É–¥–∞–ª–µ–Ω.'
    except KeyError:
        text = '–£–ø—Å, –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–æ—á–∫–∞)'
    my_bot.edit_message(callback.chat_id, callback.message.message_id, text)


@my_bot.recieve_callback_decorator('cancel')
def del_cancel_callback(callback : Callback):
    '''
    Cancel inline button selected callback handler.
    '''
    my_bot.edit_message(callback.chat_id, callback.message.message_id, '–ù—É –∏ –ª–∞–¥–Ω–æ.üòí')


@my_bot.recieve_command_decorator('/list')
def list_command(message : Message):
    '''
    Get /list command and send all birthdays specified for this chat to chat.
    '''
    b_list = db.get_chat_birthdays(message.chat_id)
    formated_list = [f' {i["name"]} {i["birth_date"]}' for i in b_list]
    formated_list = '\n'.join(formated_list)
    my_bot.send_message(message.chat_id, f'–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—èüéÇ:\n{formated_list}')


def calc_days(birth_date : datetime.date):
    '''
    Calculates how many days left until this date not included year
    '''
    d = birth_date.day
    m = birth_date.month
    now_date = datetime.date.today()
    b_date = datetime.date(day=d,month=m,year=now_date.year)
    if now_date > b_date:
        b_date = datetime.date(day=d,month=m,year=now_date.year+1)
    calc_date = b_date - now_date
    return calc_date.days

@my_bot.recieve_command_decorator('/calc')
def calculate_command(message : Message):
    '''
    Calculate how much days left for birthday
    '''
    names = db.get_chat_birthdays(message.chat_id)
    b_list = [[InlineButton('Cancel','Cancel','cancel')]]
    b_list.extend([[InlineButton(text = i['name'], data = i['name'], handler_name = 'calc')] for i in names])
    my_bot.send_inline_keyboard(message.chat_id, '–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è', b_list)
    
@my_bot.recieve_callback_decorator('calc')
def calc_callback(callback : Callback):    
    '''
    Calculate callback, send how much days left until selected birthday.
    '''
    _name = callback.data
    try:
        b_dict = db.get_birthday(_name, callback.chat_id)
    except KeyError:
        my_bot.send_message(callback.chat_id, '–£–ø—Å –æ—à–∏–±–æ—á–∫–∞')
        return
    d,m,y = map(int, b_dict['birth_date'].split('.'))
    days = calc_days(datetime.date(y,m,d))
    my_bot.edit_message(callback.chat_id, callback.message.message_id, f'–û—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è "{_name}"')
    

@my_bot.recieve_command_decorator('/test')
def test_markup_command(message : Message):
    '''
    Recieve /test command for tetsing inline keyboard.
    '''
    buttons = [
        [InlineButton('1', 'b1', 'test')],
        [InlineButton('2', 'b2', 'test')],
        [InlineButton('3', 'b3', 'test')]
        ]
    my_bot.send_inline_keyboard(message.chat_id, 'Test', buttons)


@my_bot.recieve_callback_decorator('test')
def test_callback(callback : Callback):
    '''
    /test Inline keyboard callback, edit message with inline keyboard depends on your answer
    '''
    my_bot.edit_message(callback.chat_id, callback.message.message_id, f'U select {callback.data}')



def main():  
    print('Bot started!')
    try:
        while True:
            birthday_handler.check_birthday()
            my_bot.polling()
    finally:
        #add my_bot.stop()
        pass    


if __name__ == '__main__':  
    try:
        main()
    except KeyboardInterrupt:
        print('Bot stoped!')
        exit()
